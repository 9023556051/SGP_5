from flask import Flask, request, render_template, redirect, url_for, flash, session, send_file
import pickle
import numpy as np
import os
import io
import base64
import datetime
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors


app = Flask(__name__)
app.secret_key = 'your-very-secret-key'  # Use a fixed string in production

# Load the trained model
try:
    model = pickle.load(open('model.pkl', 'rb'))
except FileNotFoundError:
    print("Warning: model.pkl not found. Please ensure the model file is present.")
    model = None


@app.route("/")
def home():
    """Home page with PCOS prediction form"""
    return render_template('index.html')


@app.route("/about")
def about():
    """About page with PCOS information"""
    return render_template('about.html')


@app.route('/download_report')
def download_report():
    pdf_data = session.get('pdf_report')
    if not pdf_data:
        flash('No report available. Please generate a prediction first.', 'error')
        return redirect(url_for('home'))
    buffer = io.BytesIO(base64.b64decode(pdf_data))
    return send_file(buffer, as_attachment=True, download_name="PCOS_Report.pdf", mimetype="application/pdf")


@app.route("/<name>")
def rande(name):
    """Redirect any unknown routes to about page"""
    return redirect(url_for('about'))


@app.route('/predict', methods=['POST'])
def predict():
    """
    Handle PCOS prediction form submission
    """
    try:
        # List of (field label, form key)
        input_fields = [
            ("Age", "Age"),
            ("Weight (kg)", "Weight"),
            ("Height (cm)", "Height"),
            ("BMI", "BMI"),
            ("Pulse Rate (bpm)", "PulseRate"),
            ("Respiration Rate", "RR"),
            ("Systolic BP (mmHg)", "BP_systolic"),
            ("Diastolic BP (mmHg)", "BP_diastolic"),
            ("Irregular Periods", "Cycle(R/I)"),
            ("Ever Been Pregnant", "Pregnant"),
            ("Number of Abortions", "No. of Abortions"),
            ("Follicle Count", "Follicle_count"),
            ("FSH (mlU/ml)", "FSH"),
            ("LH (mlU/ml)", "LH"),
            ("FSH:LH Ratio", "FSH_LH_ratio"),
            ("TSH (Î¼IU/ml)", "TSH"),
            ("AMH (pmol/L)", "AMH"),
            ("PRL (ng/ml)", "PRL"),
            ("Vitamin D3 (ng/ml)", "VitD3"),
            ("Progesterone (ng/ml)", "PRG"),
            ("Waist:Hip Ratio", "W_H_ratio"),
            ("Random Blood Sugar (mg/dl)", "RBS"),
            ("Weight Gain", "Weight_gain"),
            ("Abnormal Hair Growth", "hair_growth"),
            ("Skin Darkening", "Skin_darkening"),
            ("Hair Loss", "Hair_loss"),
            ("Increased Pimples", "Pimples"),
            ("Fast Food Consumption", "Fast_food"),
            ("Regular Exercise", "Reg_exercise"),
        ]
        features = []
        input_values = {}
        for label, key in input_fields:
            value = float(request.form.get(key))
            features.append(value)
            input_values[label] = value

        prediction = model.predict([features])
        result = "PCOS Positive" if prediction[0] == 1 else "PCOS Negative"

        # --- PDF generation ---
        buffer = io.BytesIO()
        pdf = canvas.Canvas(buffer, pagesize=A4)
        width, height = A4

        # Header
        pdf.setFont("Helvetica-Bold", 20)
        pdf.setFillColor(colors.HexColor("#667eea"))
        pdf.drawCentredString(width / 2, height - 60, "PCOS Prediction Report")
        pdf.setFillColor(colors.black)
        pdf.setFont("Helvetica", 12)
        pdf.drawString(40, height - 90, f"Date: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        # Section Title
        y = height - 120
        pdf.setFont("Helvetica-Bold", 14)
        pdf.drawString(40, y, "Patient Input Details:")
        y -= 20

        # Draw a table-like structure for inputs
        pdf.setFont("Helvetica", 11)
        row_height = 16
        col1_x = 50
        col2_x = 250
        for label, value in input_values.items():
            if y < 80:
                pdf.showPage()
                y = height - 60
                pdf.setFont("Helvetica", 11)
            pdf.drawString(col1_x, y, f"{label}:")
            pdf.drawString(col2_x, y, str(value))
            y -= row_height

        # Prediction Result Section
        y -= 10
        pdf.setFont("Helvetica-Bold", 13)
        pdf.setFillColor(colors.HexColor("#764ba2"))
        pdf.drawString(40, y, "Prediction Result:")
        pdf.setFillColor(colors.black)
        pdf.setFont("Helvetica", 12)
        y -= 20
        pdf.drawString(60, y, result)
        y -= 30

        # Footer
        pdf.setFont("Helvetica-Oblique", 9)
        pdf.setFillColor(colors.grey)
        pdf.drawString(40, 40, "This report is generated by the PCOS Prediction Tool.")
        pdf.setFillColor(colors.black)

        pdf.showPage()
        pdf.save()
        buffer.seek(0)

        # Store PDF in session as base64
        session['pdf_report'] = base64.b64encode(buffer.getvalue()).decode('utf-8')

        return render_template('index.html', prediction_text=result)
    except Exception as e:
        flash(f'An error occurred during prediction: {str(e)}', 'error')
        return render_template('index.html')


@app.errorhandler(404)
def not_found_error(error):
    """Handle 404 errors"""
    return render_template('index.html'), 404


@app.errorhandler(500)
def internal_error(error):
    """Handle 500 errors"""
    flash('An internal server error occurred. Please try again.', 'error')
    return render_template('index.html'), 500


if __name__ == "__main__":
    # Check if model is available
    if model is None:
        print("Error: Cannot start application without model.pkl")
        exit(1)

    print("PCOS Prediction Web Application")
    print("Model loaded successfully!")
    print("Starting Flask application...")

    app.run(debug=True, host='0.0.0.0', port=5000)

